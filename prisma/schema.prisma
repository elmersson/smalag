// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String    @id @default(uuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  isTwoFactorEnabled Boolean   @default(false)

  accounts              Account[]
  sessions              Session[]
  twoFactorConfirmation TwoFactorConfirmation?
  userSpaces            UserSpace[]
  userChannels          UserChannel[]
}

model Space {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userSpaces UserSpace[]
  channels   Channel[]
}

model UserSpace {
  id      String   @id @default(uuid())
  userId  String
  spaceId String
  role    UserRole @default(USER)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([userId, spaceId])
}

model Channel {
  id          String  @id @default(uuid())
  name        String
  description String?
  spaceId     String
  parentId    String?

  space        Space         @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  parent       Channel?      @relation("ChannelToSubChannel", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subChannels  Channel[]     @relation("ChannelToSubChannel")
  userChannels UserChannel[]
}

model UserChannel {
  id        String @id @default(uuid())
  userId    String
  channelId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique @db.Text
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique @db.Text
  expires DateTime

  @@unique([email, token])
}
