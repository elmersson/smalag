model Account {
    id                 String  @id @default(uuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String? @db.Text
    access_token       String? @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.Text
    session_state      String?
    oauth_token_secret String? @db.Text
    oauth_token        String? @db.Text

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model TwoFactorConfirmation {
    id     String @id @default(uuid())
    userId String @unique

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id      String   @id @default(uuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(uuid())
    email   String
    token   String   @unique @db.Text
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(uuid())
    email   String
    token   String   @unique @db.Text
    expires DateTime

    @@unique([email, token])
}
